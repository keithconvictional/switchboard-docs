"use strict";(self.webpackChunkswitchboard=self.webpackChunkswitchboard||[]).push([[446],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return n?o.createElement(h,a(a({ref:t},l),{},{components:n})):o.createElement(h,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:r,a[1]=u;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7709:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],u={},c="Building New Switches",s={unversionedId:"building-new-switches",id:"building-new-switches",isDocsHomePage:!1,title:"Building New Switches",description:"There are two ways to get started with building new Switches; you can use our template code as the base for your new Switch or you can use our CLI (Recommended).",source:"@site/docs/building-new-switches.md",sourceDirName:".",slug:"/building-new-switches",permalink:"/switchboard-docs/docs/building-new-switches",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/building-new-switches.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Welcome to Switchboard",permalink:"/switchboard-docs/docs/getting-started"},next:{title:"Setups",permalink:"/switchboard-docs/docs/deployments/setups"}},l=[{value:"CLI",id:"cli",children:[],level:2}],p={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"building-new-switches"},"Building New Switches"),(0,i.kt)("p",null,"There are two ways to get started with building new Switches; you can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/convictional/switchboard-module-boilerplate"},"our template code")," as the base for your new Switch or you can use our CLI (Recommended)."),(0,i.kt)("h2",{id:"cli"},"CLI"),(0,i.kt)("p",null,"You can find instructions for ",(0,i.kt)("a",{parentName:"p",href:"/docs/deployments/cli"},"installing the CLI here"),". You will need to decide on the setup of your ETL job. We have recommended ",(0,i.kt)("a",{parentName:"p",href:"/docs/deployments/setups"},"a few different types of setups"),". You will need to decide on naming for each serverless function. You will need to determine the inputs and outputs."),(0,i.kt)("p",null,"Once that has all been decide, you can start your project. Create an empty Github repository. You should have setup Git in your terminal. Clone your repository, then change directories into it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone git@github.com:your-username/your-repo-name.git\ncd your-repo-name\n")),(0,i.kt)("p",null,"From this point, you can issue the ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"switchboard new switch\n")),(0,i.kt)("p",null,"This will download the boilerplate code, and convert the imports to be your package."),(0,i.kt)("p",null,"You are ready to start building! You can find each of the ETL step in its own package."),(0,i.kt)("p",null,"Let's move onto deploying your new Switch. The ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," command is structured as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"switchboard deploy <cloud_platform> <steps> config=<path_to_yaml (optional)>\n")),(0,i.kt)("p",null,"It could look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"switchboard deploy aws Convictional--Func1--SQS--Func2--SQS--Func3--Convictional\n")),(0,i.kt)("p",null,"In the example above, it deploys two AWS Lambdas and, one AWS Simple Queue Services. It pulls from Convictional, and posts to Convictional at the end of the process. You may notice ",(0,i.kt)("inlineCode",{parentName:"p"},"Func1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Func2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Func3")," are different names. This indicates to the CLI that you want two separate functions. If you prefix with ",(0,i.kt)("inlineCode",{parentName:"p"},"Func")," it assumes it is a serverless function."),(0,i.kt)("p",null,"The last argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"config"),". You would pass in a file path to a configuration file. This argument is optional. Below is a sample configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Func1:\n  name: pull-and-queue\n  triggers:\n    schedule\n  schedule: 0 0 12 1/1 * ? *\n  envPath: ./pull-and-queue.env\nFunc2:\n  name: transform-and-queue\n  triggers:\n    sqs\n  envPath: ./transform-and-queue.env\nFunc3:\n  name: push\n  triggers:\n    sqs\n  envPath: ./push.env\n")),(0,i.kt)("p",null,"You can find a full list of config settings ",(0,i.kt)("a",{parentName:"p",href:"/docs/deployments/cli"},"here"),"."))}d.isMDXComponent=!0}}]);